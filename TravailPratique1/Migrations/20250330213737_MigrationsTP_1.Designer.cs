// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravailPratique1;

#nullable disable

namespace TravailPratique1.Migrations
{
    [DbContext(typeof(BoutiqueDbContext))]
    [Migration("20250330213737_MigrationsTP_1")]
    partial class MigrationsTP_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravailPratique1.Models.ClientProduit", b =>
                {
                    b.Property<int>("clientProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientProduitId"));

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantité")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("clientProduitId");

                    b.HasIndex("productId");

                    b.HasIndex("userId");

                    b.ToTable("ClientProduits");
                });

            modelBuilder.Entity("TravailPratique1.Models.Commande", b =>
                {
                    b.Property<int>("commandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commandeId"));

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("factureId")
                        .HasColumnType("int");

                    b.HasKey("commandeId");

                    b.HasIndex("clientId");

                    b.HasIndex("factureId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("TravailPratique1.Models.Facture", b =>
                {
                    b.Property<int>("factureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("factureId"));

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<int>("commandeId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vendeurId")
                        .HasColumnType("int");

                    b.HasKey("factureId");

                    b.HasIndex("clientId");

                    b.HasIndex("commandeId");

                    b.HasIndex("vendeurId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("TravailPratique1.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productId"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vendeurId")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.HasIndex("vendeurId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("TravailPratique1.Models.ProduitCommande", b =>
                {
                    b.Property<int>("produitCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("produitCommandeId"));

                    b.Property<int>("commandeId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantité")
                        .HasColumnType("int");

                    b.HasKey("produitCommandeId");

                    b.HasIndex("commandeId");

                    b.HasIndex("productId");

                    b.ToTable("ProduitCommandes");
                });

            modelBuilder.Entity("TravailPratique1.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TravailPratique1.Models.Client", b =>
                {
                    b.HasBaseType("TravailPratique1.Models.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("TravailPratique1.Models.Vendeur", b =>
                {
                    b.HasBaseType("TravailPratique1.Models.User");

                    b.HasDiscriminator().HasValue("Vendeur");
                });

            modelBuilder.Entity("TravailPratique1.Models.ClientProduit", b =>
                {
                    b.HasOne("TravailPratique1.Models.Product", "product")
                        .WithMany("clientProduits")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravailPratique1.Models.Client", "client")
                        .WithMany("clientProduits")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("product");
                });

            modelBuilder.Entity("TravailPratique1.Models.Commande", b =>
                {
                    b.HasOne("TravailPratique1.Models.Client", "client")
                        .WithMany("commandes")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravailPratique1.Models.Facture", "facture")
                        .WithMany()
                        .HasForeignKey("factureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("facture");
                });

            modelBuilder.Entity("TravailPratique1.Models.Facture", b =>
                {
                    b.HasOne("TravailPratique1.Models.Client", "client")
                        .WithMany("factures")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravailPratique1.Models.Commande", "commande")
                        .WithMany()
                        .HasForeignKey("commandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravailPratique1.Models.Vendeur", "vendeur")
                        .WithMany("factures")
                        .HasForeignKey("vendeurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("commande");

                    b.Navigation("vendeur");
                });

            modelBuilder.Entity("TravailPratique1.Models.Product", b =>
                {
                    b.HasOne("TravailPratique1.Models.Vendeur", "vendeur")
                        .WithMany("products")
                        .HasForeignKey("vendeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vendeur");
                });

            modelBuilder.Entity("TravailPratique1.Models.ProduitCommande", b =>
                {
                    b.HasOne("TravailPratique1.Models.Commande", "commande")
                        .WithMany("produitCommandes")
                        .HasForeignKey("commandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravailPratique1.Models.Product", "product")
                        .WithMany("produitCommandes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("commande");

                    b.Navigation("product");
                });

            modelBuilder.Entity("TravailPratique1.Models.Commande", b =>
                {
                    b.Navigation("produitCommandes");
                });

            modelBuilder.Entity("TravailPratique1.Models.Product", b =>
                {
                    b.Navigation("clientProduits");

                    b.Navigation("produitCommandes");
                });

            modelBuilder.Entity("TravailPratique1.Models.Client", b =>
                {
                    b.Navigation("clientProduits");

                    b.Navigation("commandes");

                    b.Navigation("factures");
                });

            modelBuilder.Entity("TravailPratique1.Models.Vendeur", b =>
                {
                    b.Navigation("factures");

                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
